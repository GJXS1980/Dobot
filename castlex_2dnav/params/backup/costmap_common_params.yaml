map_type: costmap
origin_z: 0.0
z_resolution: 1
z_voxels: 2

obstacle_range: 2.5	# 设置机器人检测障碍物的最大范围(单位：米),在最大范围内检测到的障碍信息，才会在地图中进行更新
raytrace_range: 3.0	# 设置机器人检测自由空间的最大范围(单位：米),机器人将根据传感器的信息，清除范围内的自由空间

publish_voxel_map: false
transform_tolerance: 0.5
meter_scoring: true

#footprint: [[0.48, -0.40], [0.48, 0.40], [-0.48, 0.40], [-0.48, -0.40]]	# 修改成外形为圆形的机器人
#footprint_padding: 0.1

robot_radius: 0.2	#　机器人底盘半径

plugins:
- {name: obstacles_layer, type: "costmap_2d::ObstacleLayer"}
- {name: inflater_layer, type: "costmap_2d::InflationLayer"}


# 障碍物层
# sensor_frame标识传感器的参考系名称，data_type表示激光数据或者点云数据使用的消息类型，topic_name表示传感器发布的话题名称，而marking和clearing参数用来表示是否需要使用传感器的实时信息来添加或清楚代价地图中的障碍物信息,min_obstacle_height和max_obstacle_height描述障碍物最小和最大高度
obstacles_layer:
  observation_sources: laser_scan_sensor	# 列出了代价地图需要关注的所有传感器信息，每一个传感器信息都将在后边列出详细信息
  laser_scan_sensor: {sensor_frame: laser_frame, data_type: LaserScan, topic: scan, marking: true, clearing: true, min_obstacle_height: -0.2, max_obstacle_height: 0.6, obstacle_range: 2.5, raytrace_range: 3.0}	

# 膨胀层
inflater_layer:
 inflation_radius: 0.10	# 设置障碍物的膨胀参数，也就是机器人应该与障碍物保持的最小安全距离
